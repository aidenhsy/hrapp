import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import axios from 'axios';

export default function Home({ data }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {data.map((e) => (
          <div className={styles.grid} key={e.system_fields.employee_no}>
            <a
              href={`/employees/${e.system_fields.employee_no}`}
              className={styles.card}
            >
              <h2>{e.system_fields.name} &rarr;</h2>
            </a>
          </div>
        ))}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export async function getServerSideProps() {
  try {
    const res_token = await axios.post(
      'https://open.feishu.cn/open-apis/auth/v3/app_access_token/internal',
      {
        app_id: process.env.APP_ID,
        app_secret: process.env.APP_SECRET,
      },
      {
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
        },
      }
    );

    const token = res_token.data.tenant_access_token;

    const res_empl = await axios.get(
      'https://open.feishu.cn/open-apis/ehr/v1/employees?type=5',
      {
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          Authorization: `Bearer ${token}`,
        },
      }
    );

    return {
      props: { data: res_empl.data.data.items }, // will be passed to the page component as props
    };
  } catch (error) {
    return {
      props: {
        error: error,
      },
    };
  }
}
